{"meta":{"title":"糖仔","subtitle":null,"description":"糖仔的博客","author":"糖仔","url":"http://blog.tangbzai.top","root":"/"},"pages":[{"title":"about","date":"2019-02-15T15:43:09.000Z","updated":"2020-03-21T04:44:42.748Z","comments":false,"path":"about/index.html","permalink":"http://blog.tangbzai.top/about/index.html","excerpt":"","text":""}],"posts":[{"title":"深拷贝/深克隆","slug":"深拷贝","date":"2020-07-17T13:03:49.000Z","updated":"2020-07-17T14:20:35.799Z","comments":true,"path":"2020/07/17/深拷贝/","link":"","permalink":"http://blog.tangbzai.top/2020/07/17/%E6%B7%B1%E6%8B%B7%E8%B4%9D/","excerpt":"","text":"深拷贝/深克隆（deepclone） 一. JSON.stringify 和 JSON.parse0 123function deepCopy(obj)&#123; return JSON.parse(JSON.stringify(obj));&#125; 局限性： 无法实现对undefined、函数(function)、正则表达式(RegExp)、Symbol类型的克隆 会抛弃对象的构造函数（constructor），所有的构造函数会指向Object 对象有循环引用，会报错 二. 遍历 123456789101112function deepCopy(obj)&#123; // 判断是否是简单数据类型 if(typeof obj == &quot;object&quot;)&#123; var result = obj.constructor == Array ? [] : &#123;&#125;; for(let i in obj)&#123; result[i] = typeof obj[i] == &quot;object&quot; ? deepCopy(obj[i]) : obj[i]; &#125; &#125; else &#123; var result = obj; &#125; return result;&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://blog.tangbzai.top/tags/JavaScript/"}]},{"title":"微分中值定理及导数应用","slug":"微分中值定理及导数应用","date":"2020-04-12T11:25:17.000Z","updated":"2020-04-12T14:24:00.548Z","comments":true,"path":"2020/04/12/微分中值定理及导数应用/","link":"","permalink":"http://blog.tangbzai.top/2020/04/12/%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E5%BA%94%E7%94%A8/","excerpt":"","text":"微分中值定理及导数的应用 一、微分中值定理 1. 罗尔定理 如果函数f(x)f(x)f(x)满足： 在闭区间[a,b]上连续; 在开区间(a,b)上内可导; f(a)=f(b)f(a) = f(b)f(a)=f(b) 则∃ξ∈(a,b)\\exist \\xi\\in(a,b)∃ξ∈(a,b)，使得 f′(ξ)=0f&#x27;(\\xi) = 0 f′(ξ)=0 2. 拉格朗日中值定理 如果函数f(x)f(x)f(x)满足： 在闭区间[a,b]上连续; 在开区间(a,b)上内可导; 则∃ξ∈(a,b)\\exist \\xi\\in(a,b)∃ξ∈(a,b)，使得 f′(ξ)=f(b)−f(a)b−af&#x27;(\\xi) = \\frac{f(b)-f(a)}{b-a} f′(ξ)=b−af(b)−f(a)​ 二、函数的单调性、极值与最值 1. 单调性 判定方法： {f′(x)&gt;0,f(x)↑f′(x)&lt;0,f(x)↓\\begin{cases} f&#x27;(x)&gt;0,&amp;f(x)\\uarr \\\\ f&#x27;(x)&lt;0,&amp;f(x)\\darr \\end{cases} {f′(x)&gt;0,f′(x)&lt;0,​f(x)↑f(x)↓​ 讨论单调性（单调区间）的步骤： 求定义域; 求出f′(x)=0f&#x27;(x) = 0f′(x)=0和f′(x)f&#x27;(x)f′(x)不存在的点，将定义域划分为若干个子区间; 列表，根据f′(x)f&#x27;(x)f′(x)在子区间内的符号，确定单调性. 2. 极值 定义： {f(x)&lt;f(x0),则x=x0为极大值点,f(x)为极大值f(x)&gt;f(x0),则x=x0为极小值点,f(x)为极小值\\begin{cases} f(x) &lt; f(x_0),&amp;则x=x_0为极大值点,f(x)为极大值\\\\ f(x) &gt; f(x_0),&amp;则x=x_0为极小值点,f(x)为极小值 \\end{cases} {f(x)&lt;f(x0​),f(x)&gt;f(x0​),​则x=x0​为极大值点,f(x)为极大值则x=x0​为极小值点,f(x)为极小值​ *f(x)f(x)f(x)：x0x_0x0​点左右两侧的函数值; 极值的判定 第一判断定理 {x&lt;x0时,f′(x)&gt;0;x&gt;x0时,f′(x)&lt;0,则x=x0为极大值x&lt;x0时,f′(x)&lt;0;x&gt;x0时,f′(x)&gt;0,则x=x0为极小值\\begin{cases} x&lt;x_0时,f&#x27;(x) &gt; 0;&amp;x&gt;x_0时,f&#x27;(x) &lt; 0,&amp;则x=x_0为极大值 \\\\ x&lt;x_0时,f&#x27;(x) &lt; 0;&amp;x&gt;x_0时,f&#x27;(x) &gt; 0,&amp;则x=x_0为极小值 \\end{cases} {x&lt;x0​时,f′(x)&gt;0;x&lt;x0​时,f′(x)&lt;0;​x&gt;x0​时,f′(x)&lt;0,x&gt;x0​时,f′(x)&gt;0,​则x=x0​为极大值则x=x0​为极小值​ *极值点是单调性的分界点，左右两侧f′(x)f&#x27;(x)f′(x)必然异号。 第二判定定理 f′(x0)=0时{f′′(x0)&gt;0,则x=x0为极小值点f′′(x0)&lt;0,则x=x0为极大值点f&#x27;(x_0)=0时 \\begin{cases} f&#x27;&#x27;(x_0)&gt;0, 则x=x_0为极小值点\\\\ f&#x27;&#x27;(x_0)&lt;0, 则x=x_0为极大值点 \\end{cases} f′(x0​)=0时{f′′(x0​)&gt;0,则x=x0​为极小值点f′′(x0​)&lt;0,则x=x0​为极大值点​ 驻点 若f′(x0)=0,则x0为f(x)的驻点若f&#x27;(x_0) = 0, 则x_0为f(x)的驻点 若f′(x0​)=0,则x0​为f(x)的驻点 *驻点⇎\\nLeftrightarrow⇎极值点(驻点推不出来极值点，极值点也推不出来驻点) 若x=x0x=x_0x=x0​为f(x)f(x)f(x)的极值点，则f′(x0)=0f&#x27;(x_0) = 0f′(x0​)=0或f′(x0)f&#x27;(x_0)f′(x0​)不存在 求极值点和极值的步骤： 确定f(x)f(x)f(x)定义域; 求导f′(x0)f&#x27;(x_0)f′(x0​),并求出f′(x)=0f&#x27;(x) = 0f′(x)=0和f′(x)f&#x27;(x)f′(x)不存在的点; 列表 3. 最值 步骤： 求出所有f′(x)=0f&#x27;(x) = 0f′(x)=0和f′(x)f&#x27;(x)f′(x)不存在的点 求出上述点的函数值和端点的函数值 {最大值=max[极值，端点值]最小值=min[极值，端点值]\\begin{cases} 最大值 = max[极值， 端点值] \\\\ 最小值 = min[极值， 端点值] \\end{cases} {最大值=max[极值，端点值]最小值=min[极值，端点值]​ 三、函数的凹凸性与拐点 1. 凹凸性 凹曲线：曲线上任意点处的切线总位于曲线的下方； 凸曲线：曲线上任意点处的切线总位于曲线的上方； 2. 凹凸性的判定 {f′′(x)&gt;0,凹f′′(x)&lt;0,凸\\begin{cases} f&#x27;&#x27;(x)&gt;0,&amp;凹 \\\\ f&#x27;&#x27;(x)&lt;0,&amp;凸 \\end{cases} {f′′(x)&gt;0,f′′(x)&lt;0,​凹凸​ *大凹小凸 3. 拐点 凹凸性的分界点称为拐点，记作(x0,y0)(x_0,y_0)(x0​,y0​). 拐点左右两侧f′′(x)f&#x27;&#x27;(x)f′′(x)必然异号. 若点(x0,y0)(x_0,y_0)(x0​,y0​)是曲线y=f(x)y=f(x)y=f(x)的拐点，则f′′(x0)=0f&#x27;&#x27;(x_0)=0f′′(x0​)=0或f′′(x0)f&#x27;&#x27;(x_0)f′′(x0​)不存在 4. 凹凸区间及拐点的求解步骤： 求出定义域 求出f′′(x)=0f&#x27;&#x27;(x) = 0f′′(x)=0以及f′′(x)f&#x27;&#x27;(x)f′′(x)不存在的点; 列表，由f′′(x)f&#x27;&#x27;(x)f′′(x)符号得出凹凸区间，凹凸区间的分界点即为拐点. 四、渐近线 水平渐近线 若lim⁡x→∞f(x)=C\\lim_{x\\to\\infty}f(x)=Climx→∞​f(x)=C,则称y=Cy=Cy=C是y=f(x)y=f(x)y=f(x)的一条水平渐近线. 垂直渐近线 若lim⁡x→x0±f(x)=∞\\lim_{x\\to x_0^\\pm}f(x)=\\inftylimx→x0±​​f(x)=∞,则称x=x0x=x_0x=x0​是y=f(x)y=f(x)y=f(x)的一条垂直渐近线. 五、利用单调性证明不等式和根的存在性 不等式的证明步骤： 构造函数f(x)f(x)f(x); 求导判断单调性; 大于最低点，小于最高点. 唯一根的证明步骤： 利用零点或罗尔定理证明至少有一个根; 求导判断函数单调，得唯一根; 六、恒等式的证明 构造函数f(x)f(x)f(x) 求导验证f′(x)=0f&#x27;(x)=0f′(x)=0 f(x)=f(x0)=Cf(x)=f(x_0)=Cf(x)=f(x0​)=C","categories":[],"tags":[{"name":"数学","slug":"数学","permalink":"http://blog.tangbzai.top/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"导数与微分","slug":"导数与微分","date":"2020-04-04T11:25:10.000Z","updated":"2022-03-01T14:48:33.782Z","comments":true,"path":"2020/04/04/导数与微分/","link":"","permalink":"http://blog.tangbzai.top/2020/04/04/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/","excerpt":"","text":"导数与微分 一、导数概念 1. 导数的定义 若极限lim⁡Δx→xΔyΔx\\lim_{\\Delta x\\to x}{\\frac{\\Delta y}{\\Delta x}}limΔx→x​ΔxΔy​存在，则称函数y=f(x)y=f(x)y=f(x)在x0x_0x0​处可导，并称此极限为函数y=f(x)y=f(x)y=f(x)在点x0x_0x0​处的导数，记作 y′∣x=x0或y′(x0)或dydx∣x=x0 y&#x27;|_{x=x_0} 或 y&#x27;(x_0) 或 \\frac{dy}{dx}|_{x=x_0} y′∣x=x0​​或y′(x0​)或dxdy​∣x=x0​​ 2. 常用的导数定义形式 f′(x0)=lim⁡x→x0f(x)−f(x0)x−x0或f′(x0)=lim⁡Δx→0f(x0+Δx)−f(x0)Δx\\begin{aligned} f&#x27;(x_0) &amp;= \\lim_{x\\to x_0}\\frac{f(x)-f(x_0)}{x-x_0} \\\\ 或 \\\\ f&#x27;(x_0) &amp;= \\lim_{\\Delta x\\to 0}\\frac{f(x_0+\\Delta x)-f(x_0)}{\\Delta x} \\end{aligned} f′(x0​)或f′(x0​)​=x→x0​lim​x−x0​f(x)−f(x0​)​=Δx→0lim​Δxf(x0​+Δx)−f(x0​)​​ 3. 单侧导数 左导： f−′(x0)=lim⁡x→x0−f(x)−f(x0)x−x0=lim⁡Δx→0−f(x0+Δx)−f(x0)Δx\\begin{aligned} f&#x27;_-(x_0) &amp;= \\lim_{x\\to x_0^-}\\frac{f(x)-f(x_0)}{x-x_0} \\\\ &amp;= \\lim_{\\Delta x\\to 0^-}\\frac{f(x_0+\\Delta x)-f(x_0)}{\\Delta x} \\end{aligned} f−′​(x0​)​=x→x0−​lim​x−x0​f(x)−f(x0​)​=Δx→0−lim​Δxf(x0​+Δx)−f(x0​)​​ 右导： f+′(x0)=lim⁡x→x0+f(x)−f(x0)x−x0=lim⁡Δx→0+f(x0+Δx)−f(x0)Δx\\begin{aligned} f&#x27;_+(x_0) &amp;= \\lim_{x\\to x_0^+}\\frac{f(x)-f(x_0)}{x-x_0} \\\\ &amp;= \\lim_{\\Delta x\\to 0^+}\\frac{f(x_0+\\Delta x)-f(x_0)}{\\Delta x} \\end{aligned} f+′​(x0​)​=x→x0+​lim​x−x0​f(x)−f(x0​)​=Δx→0+lim​Δxf(x0​+Δx)−f(x0​)​​ 函数在某点处可导的充要条件： f−′(x0)=f+′(x0)⇔f′(x0)f&#x27;_-(x_0) = f&#x27;_+(x_0) \\Leftrightarrow f&#x27;(x_0) f−′​(x0​)=f+′​(x0​)⇔f′(x0​) 4. 导数定义式极限 lim⁡Δ=kf′(x0)\\lim\\Delta = kf&#x27;(x_0) limΔ=kf′(x0​) kkk等于极限去fff化简即可 例: 设f(x)f(x)f(x)在x=1x=1x=1处可导,则 lim⁡x→0f(1+2x)−f(1−x)x=(1+2x)−(1−x)xf′(1)=3f′(1)\\begin{aligned} &amp;\\lim_{x\\to0}\\frac{f(1+2x)-f(1-x)}{x}\\\\ =&amp;\\frac{(1+2x)-(1-x)}{x}f&#x27;(1) \\\\ =&amp;3f&#x27;(1) \\end{aligned} ==​x→0lim​xf(1+2x)−f(1−x)​x(1+2x)−(1−x)​f′(1)3f′(1)​ 二、可导与连续 1. 图像特征： 连续： 不间断; 可导：光滑 2. 可导与连续的关系 可导⇒连续 可导\\Rightarrow连续 可导⇒连续 注: 充分条件：顺箭头推 必要条件：逆箭头推 原命题成立，逆否命题也成立. 三、导数公式与运算 基本公式 (C)′=0(xn)′=nxn−1(x)′=12x(1x)′=−1x2(sin⁡x)′=cos⁡x(cos⁡x)′=−sin⁡x(tan⁡x)′=sec⁡2x(cot⁡x)′=−csc⁡2x(sec⁡x)′=sec⁡xtan⁡x(csc⁡x)′=−csc⁡xcot⁡x(ax)′=axln⁡a(ex)′=ex⋅ln⁡e=ex(log⁡ax)′=1xln⁡a(ln⁡x)′=1x(arcsin⁡x)′=11−x2(arccos⁡x)′=−11−x2(arctan⁡x)′=11+x2(arccotx)′=−11+x2\\begin{array}{rcl|rcl} (C)&#x27; &amp;=&amp; 0 &amp; (x^n)&#x27; &amp;=&amp; nx^{n-1} \\\\ (\\sqrt x)&#x27; &amp;=&amp; \\frac 1{2\\sqrt x} &amp; (\\frac 1x)&#x27; &amp;=&amp; -\\frac 1{x^2} \\\\ (\\sin x)&#x27; &amp;=&amp; \\cos x &amp; (\\cos x)&#x27; &amp;=&amp; -\\sin x \\\\ (\\tan x)&#x27; &amp;=&amp; \\sec^2x &amp; (\\cot x)&#x27; &amp;=&amp; -\\csc^2x \\\\ (\\sec x)&#x27; &amp;=&amp; \\sec x\\tan x &amp; (\\csc x)&#x27; &amp;=&amp; -\\csc x\\cot x \\\\ (a^x)&#x27; &amp;=&amp; a^x\\ln a &amp; (e^x)&#x27; &amp;=&amp; e^x·\\ln e = e^x \\\\ (\\log_ax)&#x27; &amp;=&amp; \\frac 1{x\\ln a} &amp; (\\ln x)&#x27; &amp;=&amp; \\frac 1x \\\\ (\\arcsin x)&#x27; &amp;=&amp; \\frac 1{\\sqrt{1-x^2}} &amp; (\\arccos x)&#x27; &amp;=&amp; -\\frac 1{\\sqrt{1-x^2}} \\\\ (\\arctan x)&#x27; &amp;=&amp; \\frac 1{1+x^2} &amp; (arccot x)&#x27; &amp;=&amp; -\\frac 1{1+x^2} \\end{array} (C)′(x​)′(sinx)′(tanx)′(secx)′(ax)′(loga​x)′(arcsinx)′(arctanx)′​=========​02x​1​cosxsec2xsecxtanxaxlnaxlna1​1−x2​1​1+x21​​(xn)′(x1​)′(cosx)′(cotx)′(cscx)′(ex)′(lnx)′(arccosx)′(arccotx)′​=========​nxn−1−x21​−sinx−csc2x−cscxcotxex⋅lne=exx1​−1−x2​1​−1+x21​​ 四则运算 两函数相加减[u±v]′=u′±v′ [u\\pm v]&#x27; = u&#x27;\\pm v&#x27; [u±v]′=u′±v′ 求导的函数前有系数[ku]′=ku′ [ku]&#x27; = ku&#x27; [ku]′=ku′ 系数不影响求导、极限、奇偶性、积分。 函数相乘求导[u⋅v]′=u′v+uv′ [u·v]&#x27; = u&#x27;v + uv&#x27; [u⋅v]′=u′v+uv′ 前导后不倒 + 前不导后导 函数相除求导[vu]′=v′u−vu′u2 [\\frac vu]&#x27; = \\frac {v&#x27;u-vu&#x27;}{u^2} [uv​]′=u2v′u−vu′​ 四、复合函数求导 y=f[g(x)] y = f[g(x)] y=f[g(x)] 方法：由外到里一层一层求导连乘起来 y′=f′[g(x)]⋅g′(x) y&#x27; = f&#x27;[g(x)]\\cdot g&#x27;(x) y′=f′[g(x)]⋅g′(x) 五、隐函数求导 隐函数： y=y(x)y=y(x)y=y(x)由方程F(x,y)=0F(x,y) = 0F(x,y)=0所确定， 求 dydx\\frac {dy}{dx}dxdy​ 方法： 隐函数求导公式 dydx=−FxFy(注：dxdy=−FyFx)\\frac{dy}{dx} = -\\frac{F_x}{F_y}(注：\\frac{dx}{dy} = -\\frac{F_y}{F_x}) dxdy​=−Fy​Fx​​(注：dydx​=−Fx​Fy​​) *互为负倒的关系 符号 说明 FxF_xFx​ F对x的偏导 FyF_yFy​ F对y的偏导 六、参数方程求导 形式如： {x=x(t)y=y(t)\\begin{cases} x = x(t) \\\\ y = y(t) \\end{cases} {x=x(t)y=y(t)​ 求导公式： 一阶导： dydx=y′(t)x′(t)\\frac{dy}{dx}=\\frac{y&#x27;(t)}{x&#x27;(t)} dxdy​=x′(t)y′(t)​ 二阶导： d2ydx2=[y′(t)x′(t)]′x′(t)\\frac{d^2y}{dx^2}=\\frac{[\\frac{y&#x27;(t)}{x&#x27;(t)}]&#x27;}{x&#x27;(t)} dx2d2y​=x′(t)[x′(t)y′(t)​]′​ 七、对数法求导 1. 单边取对数 适用于幂指函数y=f(x)g(x)y=f(x)^{g(x)}y=f(x)g(x) 步骤： 恒等变形 y=eln⁡f(x)g(x)=eg(x)⋅ln⁡f(x)y=e^{\\ln f(x)^{g(x)}} = e^{g(x)\\cdot\\ln f(x)} y=elnf(x)g(x)=eg(x)⋅lnf(x) *用到的两个公式 1. M=eln⁡MM = e^{\\ln M}M=elnM 2. ln⁡MN=Nln⁡M\\ln M^N = N\\ln MlnMN=NlnM 2. 当作复合函数求导 2. 双边取对数 适用于连乘、连除. 步骤： 两边同时取ln⁡\\lnln *可能会用到的两个公式 ln⁡(MN)=ln⁡M+ln⁡N\\ln(MN)=\\ln M+\\ln Nln(MN)=lnM+lnN ln⁡MN=ln⁡M−ln⁡N\\ln\\frac{M}{N}=\\ln M-\\ln NlnNM​=lnM−lnN 两边对x求导 八、求高阶导 *高阶导表达形式 {y′、y′′、y′′′、y(4)……y(n)f′(x)、f′′(x)、f′′′(x)、f(4)(x)……f(n)(x)dydx、d2ydx2、d3ydx3、d4ydx4……d(n)ydx(n)、\\begin{cases} y&#x27;、y&#x27;&#x27;、y&#x27;&#x27;&#x27;、y^{(4)}……y^{(n)} \\\\ f&#x27;(x)、f&#x27;&#x27;(x)、f&#x27;&#x27;&#x27;(x)、f^{(4)}(x)……f^{(n)}(x) \\\\ \\frac{dy}{dx}、\\frac{d^2y}{dx^2}、\\frac{d^3y}{dx^3}、\\frac{d^4y}{dx^4}……\\frac{d^{(n)}y}{dx^{(n)}}、 \\end{cases} ⎩⎪⎨⎪⎧​y′、y′′、y′′′、y(4)……y(n)f′(x)、f′′(x)、f′′′(x)、f(4)(x)……f(n)(x)dxdy​、dx2d2y​、dx3d3y​、dx4d4y​……dx(n)d(n)y​、​ 所求阶数不太高：连续求导即可. 所求阶数较高：求出前几阶，找出规律，得结果。 常见的高阶导 (ex)(n)=ex(1)(eax+b)(n)=aneax+b(2)(xm)(n)={n!,m=n0,m&lt;n(3)\\begin{aligned} (e^x)^{(n)} &amp;= e^x &amp;(1) \\\\ (e^{ax+b})^{(n)} &amp;= a^n e^{ax+b} &amp;(2) \\\\ (x^m)^{(n)} &amp;= \\begin{cases} n!&amp;, m = n\\\\ 0&amp;, m &lt; n \\end{cases} &amp;(3) \\end{aligned} (ex)(n)(eax+b)(n)(xm)(n)​=ex=aneax+b={n!0​,m=n,m&lt;n​​(1)(2)(3)​ 九、求切线方程和法线方程 导数的几何意义：f(x)f(x)f(x)表示在[x0,f(x0)][x_0,f(x_0)][x0​,f(x0​)]处切线的斜率，即k切=f′(x0)k_切=f&#x27;(x_0)k切​=f′(x0​) 若已知函数y=f(x)y=f(x)y=f(x),则在(x0,y0)(x_0,y_0)(x0​,y0​)处有： {切线方程：y−y0=f′(x0)(x−x0)法线方程：y−y0=−1f′(x0)(x−x0)\\begin{cases} 切线方程：y-y_0 = f&#x27;(x_0)(x-x_0) \\\\ 法线方程：y-y_0 = -\\frac1{f&#x27;(x_0)}(x-x_0) \\end{cases} {切线方程：y−y0​=f′(x0​)(x−x0​)法线方程：y−y0​=−f′(x0​)1​(x−x0​)​ 注： k法=−1k切k_法 = -\\frac1{k_切} k法​=−k切​1​ 十、微分 1. 微分的定义 由微商dydx=f′(x)\\frac{dy}{dx} = f&#x27;(x)dxdy​=f′(x)，得函数的微分 dy=f′(x)dxdy = f&#x27;(x)dx dy=f′(x)dx 注：对于二元函数来说，可微与可导等价。 2. 微分的基本公式 dC=0dxn=nxn−1dxd(x)=12xdxd(1x)=−1x2dxd(sin⁡x)=cos⁡xdxd(cos⁡x)=−sin⁡xdxd(tan⁡x)=sec⁡2xdxd(cot⁡x)=−csc⁡2xdxd(sec⁡x)=sec⁡xtan⁡xdxd(csc⁡x)=−csc⁡xcot⁡xdxd(ax)=axln⁡adxd(ex)=ex⋅ln⁡e⋅dx=exdxd(log⁡ax)=1xln⁡adxd(ln⁡x)=1xdxd(arcsin⁡x)=11−x2dxd(arccos⁡x)=−11−x2dxd(arctan⁡x)=11+x2dxd(arccotx)=−11+x2dx\\begin{array}{rcl|rcl} dC &amp;=&amp; 0 &amp; dx^n &amp;=&amp; nx^{n-1}dx \\\\ d(\\sqrt x) &amp;=&amp; \\frac 1{2\\sqrt x}dx &amp; d(\\frac 1x) &amp;=&amp; -\\frac 1{x^2}dx \\\\ d(\\sin x) &amp;=&amp; \\cos xdx &amp; d(\\cos x) &amp;=&amp; -\\sin xdx \\\\ d(\\tan x) &amp;=&amp; \\sec^2xdx &amp; d(\\cot x) &amp;=&amp; -\\csc^2xdx \\\\ d(\\sec x) &amp;=&amp; \\sec x\\tan xdx &amp; d(\\csc x) &amp;=&amp; -\\csc x\\cot xdx \\\\ d(a^x) &amp;=&amp; a^x\\ln adx &amp; d(e^x) &amp;=&amp; e^x\\cdot\\ln e\\cdot dx = e^xdx \\\\ d(\\log_ax) &amp;=&amp; \\frac 1{x\\ln a}dx &amp; d(\\ln x) &amp;=&amp; \\frac 1xdx \\\\ d(\\arcsin x) &amp;=&amp; \\frac 1{\\sqrt{1-x^2}}dx &amp; d(\\arccos x) &amp;=&amp; -\\frac 1{\\sqrt{1-x^2}}dx \\\\ d(\\arctan x) &amp;=&amp; \\frac 1{1+x^2}dx &amp; d(arccot x) &amp;=&amp; -\\frac 1{1+x^2}dx \\end{array} dCd(x​)d(sinx)d(tanx)d(secx)d(ax)d(loga​x)d(arcsinx)d(arctanx)​=========​02x​1​dxcosxdxsec2xdxsecxtanxdxaxlnadxxlna1​dx1−x2​1​dx1+x21​dx​dxnd(x1​)d(cosx)d(cotx)d(cscx)d(ex)d(lnx)d(arccosx)d(arccotx)​=========​nxn−1dx−x21​dx−sinxdx−csc2xdx−cscxcotxdxex⋅lne⋅dx=exdxx1​dx−1−x2​1​dx−1+x21​dx​ 3. 微分四则运算 两函数相加减d(u±v)=du±dv d(u\\pm v) = du\\pm dv d(u±v)=du±dv 求导的函数前有系数d(ku)=kdu d(ku) = kdu d(ku)=kdu 函数相乘求导d(u⋅v)=vdu+udv d(u·v) = vdu + udv d(u⋅v)=vdu+udv 函数相除求导d(vu)=udv−vduu2 d(\\frac vu) = \\frac {udv-vdu}{u^2} d(uv​)=u2udv−vdu​ 4. 微分的计算 步骤: 先求导数y′y&#x27;y′; 代公式dy=y′dxdy=y&#x27;dxdy=y′dx.","categories":[],"tags":[{"name":"数学","slug":"数学","permalink":"http://blog.tangbzai.top/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"函数 极限与连续","slug":"函数-极限与连续","date":"2020-03-25T09:29:53.000Z","updated":"2022-02-13T15:14:14.032Z","comments":true,"path":"2020/03/25/函数-极限与连续/","link":"","permalink":"http://blog.tangbzai.top/2020/03/25/%E5%87%BD%E6%95%B0-%E6%9E%81%E9%99%90%E4%B8%8E%E8%BF%9E%E7%BB%AD/","excerpt":"","text":"函数、极限与连续 函数 求函数的定义域 原则： 分母不能为01x:x≠0\\frac{1}{x}: x \\neq 0 x1​:x​=0 开偶次方时被开方数大于等于0x2n:x≥0\\sqrt[2n]{x}: x \\geq 0 2nx​:x≥0 真数大于0log⁡ax(ln⁡x,lg⁡x):x&gt;0\\log_ax(\\ln x, \\lg x): x &gt; 0 loga​x(lnx,lgx):x&gt;0 反正弦反余弦变量的整体 |x|≤ 1arcsin⁡x,arccos⁡x:−1≤x≤1\\arcsin x, \\arccos x: -1\\leq x \\leq 1 arcsinx,arccosx:−1≤x≤1 抽象函数求定义域f[u(x)]→f[v(x)]:u(x)=v(x)f[u(x)] \\to f[v(x)]: u(x)=v(x) f[u(x)]→f[v(x)]:u(x)=v(x) 分段函数：取并集 相同函数 两函数相同 ⟺ 定义域、值域都相同两函数相同 \\iff 定义域、值域都相同 两函数相同⟺定义域、值域都相同 求函数表达式 已知f(x)求f[φ(x)]f(x)求f[φ(x)]f(x)求f[φ(x)] 直接代入 已知f[φ(x)]f[φ(x)]f[φ(x)]求f(x)f(x)f(x) 凑或换元 例如：已知f(x+1)=x2+2x+2f(x+1) = x^2 + 2x + 2f(x+1)=x2+2x+2, 则f(x)f(x)f(x) = _____ 凑：f(x+1)=x2+2x+1+1=(x+1)2+1\\begin{aligned} f(x+1) &amp;= x^2+2x+1+1 \\\\ &amp;=(x+1)^2+1 \\end{aligned} f(x+1)​=x2+2x+1+1=(x+1)2+1​ 换元：令x+1=t,x=tx+1=t, x=tx+1=t,x=t∴f(t)=(t−1)2+2(t−1)+2=t2−2t+1+2t−2+2=t2+1∴f(x)=x2+1\\begin{aligned} \\therefore f(t) &amp;= (t-1)^2 + 2(t-1) + 2 \\\\ &amp;= t^2-2t+1+2t-2+2 \\\\ &amp;= t^2+1 \\\\ \\therefore f(x)&amp;=x^2+1 \\end{aligned} ∴f(t)∴f(x)​=(t−1)2+2(t−1)+2=t2−2t+1+2t−2+2=t2+1=x2+1​ 已知f[φ(x)]f[φ(x)]f[φ(x)], 求f[ψ(x)]f[ψ(x)]f[ψ(x)]。先求f(x)f(x)f(x)在求f[ψ(x)]f[ψ(x)]f[ψ(x)] 例如：已知f(x−1)=x2−xf(x-1)=x^2-xf(x−1)=x2−x,则f(x)f(\\sqrt{x})f(x​)=____ 令x−1=t,x=1+tx-1=t, x=1+tx−1=t,x=1+t∴f(t)=(1+t)2−(1+t)=1+2t+t2−1−t=t2+t∴f(x)=x2+x∴f(x)=x+x\\begin{aligned} \\therefore f(t)&amp;=(1+t)^2-(1+t) \\\\ &amp;=1+2t+t^2-1-t \\\\ &amp;= t^2+t \\\\ \\therefore f(x)&amp;=x^2+x \\\\ \\therefore f(\\sqrt{x})&amp;=x+\\sqrt{x} \\\\ \\end{aligned} ∴f(t)∴f(x)∴f(x​)​=(1+t)2−(1+t)=1+2t+t2−1−t=t2+t=x2+x=x+x​​ 函数的四种性质 单调性 定义: ∀x1&lt;x2\\forall x_1 &lt;x_2∀x1​&lt;x2​ 若f(x1)&lt;f(x2)f(x_1)&lt;f(x_2)f(x1​)&lt;f(x2​),则称为f(x)单调递增; 若f(x1)&gt;f(x2)f(x_1)&gt;f(x_2)f(x1​)&gt;f(x2​),则称为f(x)单调递减. &lt;同增异减&gt; *∀\\forall∀为任意 判定（见第二章）： {f′(x)&gt;0,则f(x)↑f′(x)&lt;0,则f(x)↓\\begin{cases} f&#x27;(x)&gt;0,则f(x)\\uparrow \\\\ f&#x27;(x)&lt;0,则f(x)\\downarrow \\end{cases} {f′(x)&gt;0,则f(x)↑f′(x)&lt;0,则f(x)↓​ 奇偶性 定义：f(−x)={−f(x),奇函数(图像关于原点对称)f(x),偶函数(图像关于y轴对称)f(-x)=\\begin{cases} -f(x),奇函数(图像关于原点对称) \\\\ f(x),偶函数(图像关于y轴对称) \\end{cases} f(−x)={−f(x),奇函数(图像关于原点对称)f(x),偶函数(图像关于y轴对称)​ 常见： 奇函数x2n+1,sin⁡x,tan⁡x,arcsin⁡x,log⁡a(1+x2±x),f(x)−f(−x)x^{2n+1}, \\sin x, \\tan x, \\arcsin x, \\log _a(\\sqrt {1+x^2} \\pm x), f(x)-f(-x)x2n+1,sinx,tanx,arcsinx,loga​(1+x2​±x),f(x)−f(−x) 偶函数x2n,∣x∣,cos⁡x,C,f(x)+f(−x)x^{2n}, |x|, \\cos x, C, f(x)+f(-x)x2n,∣x∣,cosx,C,f(x)+f(−x) 四则运算： 加减：奇±奇=奇偶±偶=偶奇±偶=非奇非偶奇\\pm奇=奇 \\\\ 偶\\pm偶=偶 \\\\ 奇\\pm偶=非奇非偶 奇±奇=奇偶±偶=偶奇±偶=非奇非偶 乘除：奇×奇=偶偶×偶=偶奇×偶=奇奇\\times奇=偶 \\\\ 偶\\times偶=偶 \\\\ 奇\\times偶=奇 奇×奇=偶偶×偶=偶奇×偶=奇 有界性 定义：若存在M,使得∣f(x)∣≤M|f(x)|\\leq M∣f(x)∣≤M,则称f(x)有界. 常见： sin⁡x,cos⁡x\\sin x,\\cos xsinx,cosx和4个反三角函数 注：符合函数外层有界，则该函数有界. 周期性 定义：若f(x+T)=f(x)f(x+T)=f(x)f(x+T)=f(x),则称T为f(x)的一个周期 常见： 函数 周期 sin⁡x,cos⁡x\\sin x, \\cos xsinx,cosx T=2πT=2\\piT=2π tan⁡x,cot⁡x\\tan x, \\cot xtanx,cotx T=πT=\\piT=π sin⁡(ax+b),cos⁡(ax+b)\\sin(ax+b),\\cos(ax+b)sin(ax+b),cos(ax+b) T=2π∣a∣T=\\frac{2\\pi}{\\mid a\\mid}T=∣a∣2π​ tan⁡(ax+b),cot⁡(ax+b)\\tan(ax+b),\\cot(ax+b)tan(ax+b),cot(ax+b) T=π∣a∣T=\\frac{\\pi}{\\mid a\\mid}T=∣a∣π​ 反函数 求反函数步骤： 反解xxx xxx,yyy互换 注明定义域 极限 极限的定义 定义： 左极限lim⁡x→x0−f(x)=A右极限lim⁡x→x0+f(x)=A 左极限\\lim_{x \\to x_0^-} f(x) = A \\\\ 右极限\\lim_{x \\to x_0^+} f(x) = A 左极限x→x0−​lim​f(x)=A右极限x→x0+​lim​f(x)=A 极限存在的充要条件：左、右极限存在且相等。 即lim⁡x→x0f(x)=A ⟺ lim⁡x→x0−f(x)=lim⁡x→x0+f(x)=A\\lim_{x\\to x_0}f(x)=A \\iff \\lim_{x\\to x_0^-}f(x)=\\lim_{x\\to x_0^+}f(x)=A x→x0​lim​f(x)=A⟺x→x0−​lim​f(x)=x→x0+​lim​f(x)=A 注：lim⁡x→∞f(x)=A ⟺ lim⁡x→−∞f(x)=lim⁡x→+∞f(x)=A\\lim_{x\\to \\infty}f(x)=A \\iff \\lim_{x\\to -\\infty}f(x)=\\lim_{x\\to +\\infty}f(x)=A x→∞lim​f(x)=A⟺x→−∞lim​f(x)=x→+∞lim​f(x)=A 极限不存在的两种情况 左右极限不相等 极限值出现无穷大 极限的计算 四则运算 设lim⁡f(x)=Alim⁡g(x)=B则：lim⁡[f(x)±g(x)]=lim⁡f(x)±limg(x)=A±Blim⁡[f(x)⋅g(x)]=lim⁡f(x)⋅lim⁡g(x)=A⋅Blim⁡f(x)g(x)=lim⁡f(x)lim⁡g(x)=AB\\begin{array}{rll} 设\\lim f(x)&amp;=A \\lim g(x)=B则：\\\\ \\lim[f(x)\\pm g(x)]&amp;=\\lim f(x)\\pm lim g(x)&amp;=A\\pm B \\\\ \\lim[f(x)·g(x)]&amp;=\\lim f(x)·\\lim g(x)&amp;=A·B \\\\ \\lim \\frac{f(x)}{g(x)}&amp;=\\frac{\\lim f(x)}{\\lim g(x)}&amp;=\\frac{A}B \\end{array} 设limf(x)lim[f(x)±g(x)]lim[f(x)⋅g(x)]limg(x)f(x)​​=Alimg(x)=B则：=limf(x)±limg(x)=limf(x)⋅limg(x)=limg(x)limf(x)​​=A±B=A⋅B=BA​​ 趋近有定义位置时直接代入 例如： lim⁡x→2x2+x−12x+1=4+2−12⋅2+1=55=1\\begin{aligned} &amp;\\lim_{x\\to2}\\frac{x^2+x-1}{2x+1} \\\\ &amp;=\\frac{4+2-1}{2·2+1} \\\\ &amp;=\\frac55 = 1 \\end{aligned} ​x→2lim​2x+1x2+x−1​=2⋅2+14+2−1​=55​=1​ (趋近与无穷时)抓大头(次数最高的) 例如： lim⁡x→∞a0xm+a1xm−1+⋅⋅⋅+amb0xn+b1xn−1+⋅⋅⋅+bn={∞,m&gt;na0b0,m=n0,m&lt;n \\lim_{x\\to\\infty}\\frac{a_0x^m+a_1x^{m-1}+···+a_m}{b_0x^n+b_1x^{n-1}+···+b_n} = \\left\\{ \\begin{array}{c} \\infty,&amp;\\text m&gt;n \\\\ \\frac{a_0}{b_0},&amp;\\text m=n \\\\ 0, &amp;\\text m&lt;n \\end{array} \\right. x→∞lim​b0​xn+b1​xn−1+⋅⋅⋅+bn​a0​xm+a1​xm−1+⋅⋅⋅+am​​=⎩⎨⎧​∞,b0​a0​​,0,​m&gt;nm=nm&lt;n​ 两个重要极限 1. lim⁡x→0sin⁡xx=1(x可换任何未知数) \\lim_{x\\to0}\\frac{\\sin x}{x}=1(x可换任何未知数) x→0lim​xsinx​=1(x可换任何未知数) 例如： lim⁡x→∞xsin⁡12x=lim⁡x→∞sin⁡12x12x⋅12=1⋅12=12\\begin{aligned} &amp;\\lim_{x\\to\\infty}x\\sin\\frac{1}{2x} \\\\ =&amp; \\lim_{x\\to\\infty}\\frac{\\sin \\frac{1}{2x}}{\\frac{1}{2x}}·\\frac{1}{2} \\\\ =&amp; 1·\\frac{1}{2} = \\frac{1}{2} \\end{aligned} ==​x→∞lim​xsin2x1​x→∞lim​2x1​sin2x1​​⋅21​1⋅21​=21​​ lim⁡x→∞(1+1x)x=lim⁡x→0(1+x)1x=e∴lim⁡□→0(1+□)1□=e,1∞\\begin{aligned} \\lim_{x\\to\\infty}(1+\\frac1x)^x &amp;= \\lim_{x\\to0}(1+x)^\\frac1x \\\\ &amp;=e \\\\ \\therefore \\lim_{□\\to0}(1+□)^\\frac1□ &amp;= e, 1^\\infty \\end{aligned} x→∞lim​(1+x1​)x∴□→0lim​(1+□)□1​​=x→0lim​(1+x)x1​=e=e,1∞​ 步骤： 凑“1” 凑“+” 凑“互倒关系” 等价无穷小代换 当x趋近与0时 1.sin⁡x、tan⁡x、arcsin⁡x、arctan⁡x～x2.ex−1、ln⁡(1+x)～x3.1−cos⁡x～12x24.1+x−1～12x\\begin{aligned} 1. &amp;\\sin x、\\tan x、\\arcsin x、\\arctan x ～ x \\\\ 2. &amp;\\large e^x-1、\\ln(1+x)～x \\\\ 3. &amp;1-\\cos x ～ \\frac{1}{2}x^2 \\\\ 4. &amp;\\sqrt{1+x}-1 ～ \\frac{1}{2}x \\end{aligned} 1.2.3.4.​sinx、tanx、arcsinx、arctanx～xex−1、ln(1+x)～x1−cosx～21​x21+x​−1～21​x​ 注：乘除可用，加减不可用. 洛必达 对于00或∞∞型有lim⁡f(x)g(x)=lim⁡f′(x)g′(x)注：用一步验证一步，若仍为对于00或∞∞型,可继续洛必达。对于\\frac00或\\frac{\\infty}{\\infty}型 \\\\ 有\\lim \\frac{f(x)}{g(x)}=\\lim \\frac{f\\prime(x)}{g\\prime(x)} \\\\ 注：用一步验证一步，若仍为对于\\frac00或\\frac{\\infty}{\\infty}型,可继续洛必达。 \\\\ 对于00​或∞∞​型有limg(x)f(x)​=limg′(x)f′(x)​注：用一步验证一步，若仍为对于00​或∞∞​型,可继续洛必达。 无穷减无穷型：通分合并 根式有理化 乘以有理化因子（凑平方差） 多出来的根号直接带入 零乘无穷型 等于一个除以另一个的倒数再洛必达 幂指函数求极限 单边取对数： 适用于幂指函数y=f(x)g(x)y=f(x)^{g(x)}y=f(x)g(x) 步骤： 恒等变形 y=eln⁡f(x)g(x)=eg(x)⋅ln⁡f(x)y=e^{\\ln f(x)^{g(x)}} = e^{g(x)\\cdot\\ln f(x)} y=elnf(x)g(x)=eg(x)⋅lnf(x) 当作复合函数求导 无穷小×有界函数=无穷小 求极限式中的未知数 将式子正常求极限再令带未知数的式子等于题目结果。 无穷小的比较 定义 无穷小：若lim⁡f(x)=0\\lim f(x)=0limf(x)=0,则称f(x)f(x)f(x)为无穷小; 无穷大：若lim⁡f(x)=∞\\lim f(x)=\\inftylimf(x)=∞,则称f(x)f(x)f(x)为无穷大 无穷小与无穷大的关系 无穷小与无穷大互为倒数 若lim⁡f(x)=0\\lim f(x)=0limf(x)=0,则lim⁡1f(x)=∞\\lim\\frac{1}{f(x)}=\\inftylimf(x)1​=∞; 若lim⁡f(x)=∞\\lim f(x)=\\inftylimf(x)=∞,则lim⁡1f(x)=0\\lim\\frac{1}{f(x)}=0limf(x)1​=0 无穷小的性质 有限个无穷小之和仍为无穷小; 有限个无穷小之积仍为无穷小; 无穷小与有界函数之积仍为无穷小; 两个无穷小的比较 lim⁡f(x)g(x)={0,f(x)是g(x)的高阶无穷小;∞,f(x)是g(x)点的低阶无穷小;C,f(x)是g(x)的同阶无穷小;1,f(x)是g(x)的等价无穷小，记作f(x)～g(x) \\lim\\frac{f(x)}{g(x)}= \\left\\{ \\begin{array}{l} 0, f(x)是g(x)的高阶无穷小;\\\\ \\infty, f(x)是g(x)点的低阶无穷小;\\\\ C, f(x)是g(x)的同阶无穷小; \\\\ 1, f(x)是g(x)的等价无穷小，记作f(x)～g(x) \\end{array} \\right. limg(x)f(x)​=⎩⎪⎪⎨⎪⎪⎧​0,f(x)是g(x)的高阶无穷小;∞,f(x)是g(x)点的低阶无穷小;C,f(x)是g(x)的同阶无穷小;1,f(x)是g(x)的等价无穷小，记作f(x)～g(x)​ 连续 函数的连续性 定义 若lim⁡x→x0f(x)=f(x0)\\lim_{x\\to x_0}f(x)=f(x_0)limx→x0​​f(x)=f(x0​),则称f(x)在x0处连续f(x)在x_0处连续f(x)在x0​处连续 即连续⟺lim⁡x→x0−f(x)=lim⁡x→x0+f(x)=f(x0) 连续\\Longleftrightarrow\\lim_{x\\to x_0^-}f(x)=\\lim_{x\\to x_0^+}f(x)=f(x_0) 连续⟺x→x0−​lim​f(x)=x→x0+​lim​f(x)=f(x0​) 函数间断点及类型的判定 间断点的定义：即不连续的点（无定义点处或分段点处） 间断点的分类：第一类{可去：左=右跳跃：左≠右第二类{无穷：左或右出现∞震荡：例x=0时,y=sin⁡1x或y=cos⁡1x第一类 \\left\\{ \\begin{array}{l} 可去：左=右 \\\\ 跳跃：左\\neq右 \\end{array} \\right. 第二类 \\left\\{ \\begin{array}{l} 无穷：左或右出现\\infty \\\\ 震荡：例x=0时,y=\\sin\\frac 1x或y=\\cos \\frac1x \\end{array} \\right. 第一类{可去：左=右跳跃：左​=右​第二类{无穷：左或右出现∞震荡：例x=0时,y=sinx1​或y=cosx1​​ 利用零点定理判断方程根的存在性 零点定理：若f(x)在[a,b]上连续，且f(a)⋅f(b)&lt;0,则∃ξ∈(a,b),使f(ξ)=0若f(x)在[a,b]上连续，且f(a)·f(b)&lt;0, \\\\ 则\\exists\\xi\\in(a,b),使f(\\xi)=0 若f(x)在[a,b]上连续，且f(a)⋅f(b)&lt;0,则∃ξ∈(a,b),使f(ξ)=0 *∃\\exists∃：至少存在一点 判定步骤： 构造函数f(x)f(x)f(x) 验证两个条件 由零点定理可知，∃ξ∈(a,b)\\exists\\xi\\in(a,b)∃ξ∈(a,b),使f(ξ)=0f(\\xi)=0f(ξ)=0 仅一根（唯一性）的证明步骤： 在上面 2 的基础上求导判断单调性即可。","categories":[],"tags":[{"name":"数学","slug":"数学","permalink":"http://blog.tangbzai.top/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"让Hexo博客支持流程图","slug":"让Hexo博客支持流程图","date":"2020-03-22T11:10:54.000Z","updated":"2020-06-18T18:17:06.654Z","comments":true,"path":"2020/03/22/让Hexo博客支持流程图/","link":"","permalink":"http://blog.tangbzai.top/2020/03/22/%E8%AE%A9Hexo%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81%E6%B5%81%E7%A8%8B%E5%9B%BE/","excerpt":"","text":"本文讲的是hexo的插件hexo-filter-mermaid-diagrams hexo-filter-mermaid-diagrams 1. 快速使用 安装 在博客的根目录下使用命令 123$ yarn add hexo-filter-mermaid-diagrams或者$ npm install hexo-filter-mermaid-diagrams 配置 配置hexo的配置文件_config.yml 123456# mermaid chartmermaid: ## mermaid url https://github.com/knsv/mermaid enable: true # default true version: &quot;7.1.2&quot; # default v7.1.2 options: # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js #startOnload: true // default true 在模版文件引入mermaid.js 在/themes/里找到自己正在使用的主题的文件夹 ,打开里面的layout文件夹，在里面找到一个在文章页面有被加载的模版文件(官方写的是after_footer文件，我的主题没有)根据下面情况引入相应内容。 我的主题使用的是fluid就添加下面的代码到/themes/fluid/layout/plugins/footer.ERB, 如果是其他尾缀类型的模版例如pug或swig请去看官方文档 12345678&lt;% if (theme.mermaid.enable) &#123; %&gt; &lt;script src=&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;&gt;&lt;/script&gt; &lt;script&gt; if (window.mermaid) &#123; mermaid.initialize(&#123;theme: &#x27;forest&#x27;&#125;); &#125; &lt;/script&gt;&lt;% &#125; %&gt; 添加完成后，回到博客根目录的_config.yml，把external_link的值改为false，默认的为true 2. 出现问题 没有效果 *记得hexo clean 原因：语法不一样,三个点后面填写mermaid 123` ` `mermaid内容` ` ` 报错Error: &lt;svg&gt; attribute viewBox: Expected number, “0 0 -Infinity -Infin…”. 原因：主题的代码高亮样式冲突了。（主题版本为v1.7.4） 将主题的代码高亮关了就好了. 12highlight: # 代码高亮 enable: false 优化 在模版footer文件引入mermaid.js的话会在博客的每个页面都加载这个文件，而我们往往并不是每个页面都会有用到这个插件。 把配置部分放到主题配置(/themes/fluid/_config.yml)里 123mermaid: # 流程图 enable: true specific: true # 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度 （就快速使用的第二步里的内容多了specific来控制是否启动转换） *如果不想放在主题配置里把第二步的theme.post改成config就好了 2. 在/themes/fluid/layout/_partial/plugins新建mermaid.ERB文件，内容如下 12345678&lt;% if(theme.post.mermaid.enable &amp;&amp; (!theme.post.mermaid.specific || (theme.post.mermaid.specific &amp;&amp; page.mermaid))) &#123; %&gt;&lt;%- js_ex(theme.static_prefix.mermaid, &quot;mermaid.min.js&quot;) %&gt;&lt;script&gt; if (window.mermaid) &#123; mermaid.initialize(&#123; theme: &#x27;default&#x27; &#125;); &#125;&lt;/script&gt;&lt;% &#125; %&gt; 引入文件到scripts.ERB 在/themes/fluid/layout/_partial/scripts.ERB最下面添加 1&lt;%- partial(&#x27;_partial/plugins/mermaid.ERB&#x27;) %&gt; 最后在_static_prefix.yml添加cdn即可 在/themes/fluid/source/_static_prefix.yml最下面添加 1mermaid: https://cdn.bootcss.com/mermaid/8.4.8/ *此处写死了版本号，想移到配置文件中请自行修改 总结 优化部分的代码还是蛮好懂的，照着本身自带的math进行修改即可。就是代码高亮部分导致的报错并无法显示耗费了许多时间。下次遇到问题先在github的Issues里看看。","categories":[],"tags":[{"name":"记录","slug":"记录","permalink":"http://blog.tangbzai.top/tags/%E8%AE%B0%E5%BD%95/"},{"name":"教程","slug":"教程","permalink":"http://blog.tangbzai.top/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"面向对象技术","slug":"面向对象技术","date":"2019-11-05T14:25:28.000Z","updated":"2020-03-23T15:28:21.748Z","comments":true,"path":"2019/11/05/面向对象技术/","link":"","permalink":"http://blog.tangbzai.top/2019/11/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF/","excerpt":"","text":"面向对象技术 面向对象的基本概念 对象：属性（数据）+ 方法（操作）+ 对象ID 类（实体类/控制类/边界类） 继承与泛化：复用机制 封装：隐藏对象的属性和实现细节，仅对外公开接口 多态：不同对象收到同样的消息产生不同的结果 接口：一种特殊的类，他只有方法定义没有实现 重载：一个类可以有多个同名而参数类型不同的方法 模板类 消息和消息通信：消息是异步通信的。 面向对象设计7大原则 单一职责原则：设计目的单一的类 开发-封闭原则：对扩展开发，对修改封闭 李氏(Liskov)替换原则：子类可以替换父类 依赖倒置原则：要依赖于抽象，而不是具体实现；针对接口编程，不要针对实现编程 接口隔离原则：使用多个专门的接口比使用单一的总接口要好 组合重用原则：要尽量使用组合，而不是继承关系达到重用目的 迪米特(Demeter)原则(最少知识法则)：一个对象对其他对象有尽可能少的了解。（独立性） UML(统一建模语言) UML2.0: 结构图 类图 对象图 包图 组合结构图（2.0新加的） 构件图 部署图：软硬件之间映射 制品图 行为图 用例图：系统与外部参与者的交互 顺序图：强调按时间顺序 通信图（协作图） 定时图（2.0新加的） 状态图 活动图：类似程序流程图，并行行为 交互概念图 类图 关系 说明 表示方法 依赖关系 一个事物发生变化影响另一个事物 虚线实心箭头 泛化（继承）关系 特殊（派生）/一般（基类）关系 实线空心箭头 关联关系 描述了一组链，链是对象之间的连接。 实线 聚合关系 整体与部分生命周期不同（部分离开整体还能使用 实线空心菱形 组合关系 整体与部分生命周期相同（部分离开整体不能使用） 实线实心菱形 实现关系 接口与类之间的关系 虚线空心箭头 设计模式的分类 创建型模式 工厂方法（factory method）模式 抽象工厂（abstract factory）模式 原型（porototype）模式 单例（singleton）模式 构建器（builder）模式 结构型模式 适配器(adapter)模式 桥接(bridge)模式 组合(composite)模式 装饰（decorator）模式 外观（facade）模式 享元（flyweight）模式 代理（proxy）模式 行为模式 职责链（chain of responsibility）模式 命令（command）模式 解释器（interpreter）模式 迭代器（iterator）模式 中介者（mediator）模式 备忘录（memento）模式 观察者（observer）模式 状态（state）模式 策略（strategy）模式 模版方法（template method）模式 访问者（visitor）模式 创建型模式 设计模式名称 简要说明 速记关键词 Abstract Factory抽象工厂模式 提供一个借口，可以创建一系列相关或相互依赖的对象，而无需指定它们具体的类 生产成系列对象 Builder构建器模式 将一个复杂类的表示与其构造相分离，使得相同的构建过程能够得出不同的表示 复杂对象构造 Factory method工厂方法模式 定义一个创建对象的接口，但由子类决定需要实例化哪一个类。工厂方法使得子类实例化的过程推迟。 动态生产对象 Prototype原型模式 用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的对象 克隆对象 Singleton单例模式 保证一个类只有一个实例，并提供一个访问它的全局访问点 单实例 结构型模式 设计模式名称 简要说明 速记关键字 Adapter适配器 将一个类的接口转换成用户希望得到的另一种接口。它使原本不相容的接口得以协同工作 转换接口 Bridge桥接模式 将类的抽象部分和它的实现部分分离开来，使它们可以独立地变化 继承树拆分 Composite组合模式 将对象组合成属性结构以表示“整体-部分”的层次结构，使得用户对单个对象和组合对象的使用具有一致性 树形目录结构 Decorator装饰模式 动态地给一个对象添加一些额外的职责。它提供了用子类扩展功能的一个灵活的替代，比派生一个子类更佳灵活 附加职责 Facade外观模式 定义一个高层接口，为子系统中的一组接口提供一个一致的外观，从而简化了该子系统的使用 对外统一接口 Flyweight享元模式 提供支持大量细粒度对象共享的有效方法 文章共享文字对象 Proxy代理模式 为其他对象提供一钟代理以控制这个对象的访问","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"计算机网络与信息安全","slug":"计算机网络与信息安全","date":"2019-11-04T12:23:57.000Z","updated":"2022-03-01T14:56:51.886Z","comments":true,"path":"2019/11/04/计算机网络与信息安全/","link":"","permalink":"http://blog.tangbzai.top/2019/11/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/","excerpt":"","text":"计算机网络与信息安全 计算机网络 OSI/RM七层模型 层次名称主要功能主要设备及协议 7应用层实现具体的应用功能POP3、FTP、HTTP、Telnet、SMTPDHCP、TFTP、SNMP、DNS 6表示层数据格式与表达、加密、压缩 5会话层建立、管理和终止会话 4传输层端到端的连接TCP、UDP 3网络层分组传输和路由选择三层交换机、路由器ARP、RARP、IP、ICMP、IGMP 2数据链路层传送以帧为单位的信息网桥、交换机（多端网桥）、网卡PPTP、L2TP、SLIP、PPP 1物理层二进制传输中继器、集线器（多端中继器） 传输层 协议 特点 TCP（传输控制协议） - 面向连接的服务- 可靠的 UDP（用户数据报协议） - 无连接的服务 - 不可靠 网络层 三层交换机：具有路由功能。 路由器：具有路由功能、可以解决交换机的广播问题。 协议 说明 ARP（地址解析协议） 把IP地址转换为MAC地址 RARP（反向地址解析协议） 把MAC地址转换为IP地址 IP（网际协议） 分配用户上网使用的数字标签 ICMP（因特网控制协议） 1.它是TCP/IP协议簇的一个子协议。2.用于在IP主机、路由器之间传递控制消息。3.控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。 IGMP（因特网组管理协议） 组播协议（网关信息协议） 数据链路层 网桥：可以隔离冲突、但会出现广播风暴。 物理层 中继器：延长数据传输距离 集线器(Hub）: 可以分流、但会出现冲突域 TCP/IP协议族 TCP/IP模型与OSI七层模型的对应： TCP/IPOSI 应用层应用层 表示层 会话层 传输层传输层 网际层网际层 网络接口层数据链路层 物理层 下列分层为TCP/IP分层 应用层 基于TCP协议 协议 端口 功能/说明 POP3（离线收邮件） 110 邮件收取 FTP 20(主动)/21(控制) (被动则两者随机) 文件传输 HTTP 80 超文本传输协议（访问网站） HTTPS 443 带加密的超文本传输协议 Telnet 23 远程访问 SMTP（简单邮件传输协议） 25 邮件发送 基于UDP协议 协议 端口 功能/说明 DHCP 67 自动分配IP地址 TFTP 69 文件传输协议 SNMP 161 简单 网路管理协议 DNS 53 域名解析服务 NFS： 传输层 TCP UDP 网际层 IP、ICMP、IGMP、ARP、RARP 网络接口层 CSMA/CD: 载波监听多路访问 IP地址 目前使用的是IPv4每个地址都是32位 网络类型 网络号与主机号的分布 网络号范围 A类 8位网络号 + 24位主机号 0-127（二进制为0开头） B类 16位网络号 + 16位主机号 128-191（二进制为10开头） C类 24位网络号 + 8位主机号 192-223（二进制为110开头） D、E类省略 子网掩码划分子网 原来的网络号部分全为1（255） 主机号的前面划分出作为子网网络号的部分。例如:划分27个子网，主机号前面5（25=32&gt;27）位就为 11111（248） 网络规划与设计 四个过程： 需求分析 网络功能要求 网络性能要求 网络运行环境的要求 网络的可扩充性和可维护性的要求 网络规划原则 实用性原则 开放性原则 先进性原则 网络设计与实施原则 可靠性原则 安全性原则 高效性原则 可扩展性原则 层次化网络设计 核心层（快速、高效的数据分发） 汇入层（主要以过滤为主） 接入层（接入PC端） 网络分类 按分布范围分 局域网(LAN) 城域网(MAN) 广域网(WAN) 因特网 按拓扑结构分 总线型 星型 环形 网络接入技术 有限接入 公用交换电话网络(PSTN) 数字数据网(DDN) 综合业务数字网(ISDN) 非对称数字用户线路（ADSL） 同轴光纤技术(HFC) 无限接入 IEEE 802.11(WIFI) IEEE 802.15(蓝牙Bluetooth) 红外(lrDA) WAPI 3G标准 WCDMA CDMA2000 TD-SCDMA WirelessMAN(802.16)(WiMAX) 4G标准 FDD-LTE TD-LTE WirelessMAN(802.16m)(WiMAX) 信息安全 对称加密技术 使用同一套密钥 graph LR 发送者A-明文-->加密算法-Ke 加密算法-Ke-->互联网-攻击者 互联网-攻击者-->解密算法-Kd 解密算法-Kd-->接受者B-明文 对称加密：Ke=Kd 特点： 加密强度不高，但效率高; 密钥分发困难。 常见对称密钥算法：DES、3DES(三重DES)、RC-5、IDEA. 非对称加密技术 每人都有一成对的密钥（公钥和私钥） 发给谁就用谁的公钥加密，接收时用自己的私钥解密。 非对称加密：：Ke≠Kd 密钥必须成对使用（公钥加密，私钥解密） 特点： 加密速度慢，但强度高。 常见非对称密钥加密算法：RSA、ECC. 数字签名 每人都有一成对的密钥（公钥和私钥） 用发送方的私钥加密，接收时用发送方的公钥解密。 信息摘要 *一般用于判断两者是否相同 数字摘要：由单向散列函数加密成固定长度的散列值。（不可逆） 常用算法有MD5, SHA等。 市场上广泛使用的MD5、SHA的散列值分别为128位和160位，由于SHA通常采用的密钥长度较长，因此安全性高于MD5 PKI公钥体系 CA中心： 管理密钥 注册密钥 更新密钥 注销密钥 分发证书给服务器（数字签名） 网络安全 各个网络层次的安全保障 物理层 隔离 屏蔽 数据链路层 链路加密 PPTP L2TP 网络层 防火墙 IPSec 传输层 TLS （基于SSL3.0） SET SSL 会话层 SSL 表示层 SSL 应用层 PGP HTTPS SSL 注意：SSL属于传输层、会话层、表示层、应用层四层 主动攻击与被动攻击 graph TB 被动攻击-->监听-保密性 监听-保密性-->消息内容获取 监听-保密性-->业务流分析 主动攻击-->中断-可用性 主动攻击-->篡改-完整性 主动攻击-->伪造-真实性 防火墙 特点：防外不防内 graph LR 防火墙-->网络级 防火墙-->应用级 网络级-->包过滤 网络级-->代理 网络级-->状态监测 应用级-->双穴主机 应用级-->屏蔽主机 应用级-->屏蔽子网 防火墙类型 说明 包过滤 只检查数据包的格式（原地址、目标地址…是否合理），速度比较快，但安全性差。 代理 不仅检查包，还检查里面。速度慢，但安全性好。 状态监测 使用状态表。综合速度与安全性。 双穴主机 将内部网络与外部网络用一台主机分隔开 屏蔽主机 在双穴主机的基础上，用路屏蔽路由器将堡垒主机与外网隔开 屏蔽子网 两个屏蔽路由器隔开内网与外网两个屏蔽路由器之间为BMZ(非军事区)BMZ区可被外网访问也可被内网访问（web服务器放在此） 安全防范体系 物理环境的安全性。 操作系统安全性。 网络安全性。 应用的安全性。 管理的安全性。 病毒与木马 病毒：编制或在计算机程序中插入的破坏计算机功能或者数据，以你影响计算机使用并且能够自我复制的一组计算机指令或者程序代码。 木马：计算机木马是一种后门程序，常被黑客用作控制远程计算机的工具。","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"系统开发基础","slug":"系统开发基础","date":"2019-11-04T07:20:39.000Z","updated":"2022-03-01T15:04:01.836Z","comments":true,"path":"2019/11/04/系统开发基础/","link":"","permalink":"http://blog.tangbzai.top/2019/11/04/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/","excerpt":"","text":"系统开发基础 软件开发模型 瀑布模型 用于需求明确的时候 阶段具体活动产物 定义阶段软件计划1. 可行性分析2. 软件计划书 需求分析 需求规格说明书 开发阶段软件设计1. 概要设计说明书2. 详细设计说明书 程序编码系统 软件测试测试报告(测试计划、测试用意) 维护阶段运行维护交付给用户，跟踪维护。 V模型 相对瀑布模型更重视测试 喷泉模型 面向对象的开发模型 没有明确的界限 演化模型 原型模型 沟通后快速构建原型并交付，收集反馈并在下一轮进行改进。 探索型原型 实验型原型 演化型原型：在原型进行后续的开发 螺旋模型 综合了瀑布模型与原型模型 给每个螺旋周期分成了四个步骤：制定计划、风险分析、实施工程、用户评估 强调风险分析，使用户、开发人员对演化层出现的风险有所了解，从而做出反应。螺旋模型适合开发庞大、复杂、高风险的系统。 统一过程（UP/RUP） “用例驱动，以架构为中心迭代，并增量” 分成四个阶段： 初始（起始） 细化（精化） 构建 移交（交付） 敏捷方法 自适应开发(ASD) 并列争球法(SCRUM) 明确定义了的可重复的方法过程 水晶方法(Crystal) 用最少的纪律约束而仍能成功的方法 特性驱动开发(FDD) 开发人员分两类：富有经验的作为协调者、设计者和指导者，另一类则主要做源码编写。 极限编程(XP) 费用严格控制的公司中使用 软件开发方法 结构化方法(面向数据流) 用户至上 严格区分工作阶段，每阶段有任务和结果 强调系统开发过程的整体性和全局性 系统开发过程工程化，文档资料标准化 自顶向下，逐步分解（求精） 不适合复杂、大型的项目 原型法 面向对象方法 更好的复用性 关键在于建立一个全面、合理、统一的模型 分析、设计、实现三个阶段，界限不明确(喷泉模型) 面向服务的方法 （SOA） 面向数据结构的方法 (Jackson) 需求分析 需求的任务 需求的过程 问题识别 分析与综合 编制需求分析文档 需求分析与评审 需求的分类 功能需求 非功能需求 设计约束 应用的工具 数据流图(DFD) 数据字典(DD) 判定表 判定树（决策树） 软件设计 软件设计的任务与活动 模块设计原则 保证独立性（高内聚，低耦合） 应用的工具 IPO图 PDL（程序描述语言）:用来描述IPO图 PAD（问题分析图） 程序流程图 N/S盒图 下面由内聚程度高到低排列 内聚类型 描述 功能内聚 完成一个单一功能，各个部分协同工作，缺一不可。 顺序内聚 处理元素相关，而且必须顺序执行 通信内聚 所有处理元素集中在一个数据结构的区域上 过程内聚 处理元素相关，而且必须按特定的次序执行 瞬时内聚（时间内聚） 所包含的任务必须在同一时间间隔内执行 逻辑内聚 完成逻辑上相关的一组任务 偶然内聚（巧合内聚） 完成一组没有关系或松散关系的任务 下面由耦合程度低到高排列 耦合类型 描述 非直接耦合 两个模块之间没有直接关系，他们之间的联系完全是通过主模块的控制和调用来实现的 数据耦合 一组模块借助参数表传递简单数据 标记耦合 一组模块通过参数表传递记录信息（数据结构） 控制耦合 模块之间传递的信息中包含用于控制模块内部逻辑的信息 外部耦合 一组模块都访问同一全局简单变量，而且不是通过参数表传递该全局变量的信息 公共耦合 多个模块都访问同一个公共数据环境 内容耦合 一个模块直接访问另一个模块的内部数据；一个模块不通过正常入口转到另一个模块的内部；两个模块有一部分程序代码重叠；一个模块有多个入口 软件测试 graph LR 静态测试-->桌面检查 静态测试-->代码审查 静态测试-->代码走查 动态测试-->黑盒测试 动态测试-->白盒测试 动态测试-->灰盒测试 黑盒测试-->等价类划分/边界值分析/错误推断/因果图 白盒测试-->语句覆盖/判定覆盖/条件覆盖/条件判定覆盖/路径覆盖 等价类划分 确定无效与有效等价类 设计用例尽可能多的覆盖有效类 设计用例只覆盖一个无效类 边界值分析 处理边界情况时最容易出错 选区的测试数据应该恰好等于、稍小于或稍大于边界值 graph LR 需求分析---验收测试 概要设计---系统测试 详细设计---集成测试 编码---单元测试 需求分析-->概要设计 概要设计-->详细设计 详细设计-->编码 编码-->单元测试 单元测试-->集成测试 集成测试-->系统测试 系统测试-->验收测试 单元测试-.->模块接口/局部数据结构/边界条件/独立的路径/错误处理 集成测试-.->模块间的接口和通信 系统测试-.->需要硬件环境,模拟一个真实环境进行恢复测试/安全性测试/强度测试/性能测试/可靠性测试和安装测试 验收测试-.->以用户为主导的测试-软件配置审查/验收测试 回归测试：测试出bug在提第二次提交的时候再测一遍。 性能测试 负载测试：在一定的资源的条件下能够承受的负载（最大负荷量）是多少。 压力测试：达到失效压力下能够承受的最大压力。 McCabe复杂度（环路复杂度） V(G)=m−n+2 V(G)=m-n+2 V(G)=m−n+2 符号 说明 m 边数 n 节点数 V(G)=封闭区域数+1 V(G)=封闭区域数+1 V(G)=封闭区域数+1 软件维护 可维护性因素决定 可理解性 文档 可测试性 可修改性 (可扩展性) 软件维护类型 改正性维护：发布前的bug没改，发布后才改。 适应性维护：因为外部环境发生了变化的更改。 预防性维护：为了==未来（将来）==的某个时候而做的修改。 完善性维护(占维护的50%)：为了扩充功能和改善性能而进行的更改。 软件工程 国家标准-软件文档管理指南-按阅读对象分类 开发文档 可行性研究和项目书 需求规格说明 功能规格说明 设计规格说明（包括程序和书序规格说明） 开发计划 软件集成和测试计划 质量保证计划、标准、进度 安全和测试信息 产品文档（跟用户有关的） 培训手册 参考手册和用户指南 软件支持手册 产品手册和信息广告 管理文档 软件质量保证 外部和内部质量： 功能性 可靠性 易用性 效率 维护性 可移植性 软件过程改进-CMMI CMMI（软件成熟度模型）：衡量一个企业达到了一个什么资质。 graph BT 初始级--纪律化-->可管理级 可管理级--标准化-->已定义级 已定义级--可预测-对过程和质量可以度量-->定量管理级 定量管理级--持续优化改进-->优化管理级 项目管理 十大知识领域： 范围管理 时间管理 成本管理 质量管理 人力资源管理 沟通管理 风险管理 采购管理 整体管理 项目干系人管理 时间管理 前导图法（单代号网络图，PDM） 求关键路径 = 求工期最长路径 关键活动：关键路径上的活动，总时差为0。 活动排序 箭头突发（双代号网络图，ADM） 虚线：表示两者有关系（不耗时） 项目管理 风险曝光度（Risk Exposure）:风险出现的概率乘以风险可能造成的损失。","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"并发控制与数据库完整性约束","slug":"并发控制与数据库完整性约束","date":"2019-10-28T13:19:04.000Z","updated":"2022-03-01T15:04:01.837Z","comments":true,"path":"2019/10/28/并发控制与数据库完整性约束/","link":"","permalink":"http://blog.tangbzai.top/2019/10/28/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F/","excerpt":"","text":"并发控制 事务 四个特性： 原子性 一致性 隔离性 持续性 并发产生的问题 graph TB id1(并发产生的问题)-->id2(丢失更新 / 不可重复读问题 / 读 脏 数据) id1(并发产生的问题)==>id3(封锁协议) id3(封锁协议)-->id4(S封锁-共享锁 / X封锁-排它锁 / 两段锁协议) id3(封锁协议)==>id5(死锁) id5(死锁)-->id6(预防 / 死锁的解除) 数据库完整性约束 实体完整性约束 主键的完整性： 非空 唯一 参照完整性约束 外键的完整性： 要么空 否则 得有一个正确的索引 用户自定义完整性约束 触发器 脚本","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"SQL语言","slug":"SQL语言","date":"2019-10-28T05:18:04.000Z","updated":"2020-03-23T15:18:33.023Z","comments":true,"path":"2019/10/28/SQL语言/","link":"","permalink":"http://blog.tangbzai.top/2019/10/28/SQL%E8%AF%AD%E8%A8%80/","excerpt":"","text":"SQL语言 建表 123CREATE TABLE &lt;表名1&gt; (&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束条件] [,&lt;列名&gt;&lt;数据库类型&gt;[列级完整性约束条件]]... [,&lt;表现级完整性约束条件&gt;]); 数据类型 说明 char(N) 字符型 int 整形 float 浮点型 date YYYY-MM-DD 日期型 完整性约束条件 说明 NULL 可以取空值 NOT NULL 不能取空值 UNIQUE 取值唯一 PRIMARY KEY (列名) 设置为主键 FOREIGN KEY (列名1) PEFERENCES 表名2 (列名2) 设置(列1)为外键且索引(表2)的(列2) 修改与删除表 修改 1234ALTER TABLE &lt;表名&gt;[ADD &lt;新列名&gt;&lt;数据类型&gt;[列级完整性约束条件]][DROP&lt;列名/完整性约束名&gt;][MODIFY/CHANGE&lt;列名&gt;&lt;数据类型&gt;] 删除 1DROP TABLE &lt;表名&gt; 查询 12345SELECT [ALL | DISTINCT] &lt;目标表达式&gt; [, &lt;目标表达式&gt;]...]FROM &lt;表名&gt; [, &lt;表名&gt;]...[WHERE &lt;条件表达式&gt;][GRORP BY &lt;列名1&gt; [HAVING&lt;条件表达式&gt;]][ORDER BY &lt;列名2&gt; [ASC | DESC]...] 处理类型 处理子类示例/语法 结果排序升序或降序ORDER BY 字段名 DESC\\|ASC 集函数统计COUNT([DISTINCT|ALL]) 一列值的总和SUM([DISTINCT|ALL]) 一列值的平均值AVG([DISTINCT|ALL]) 求一列值中的最大值MAX([DISTINCT|ALL]) 求一列值中的最小值MIN([DISTINCT|ALL]) 对结果分组将查询结果按列分组GROUP BY 对分组结果筛选对分组结果筛选HAVING","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"规范化理论","slug":"规范化理论","date":"2019-10-26T07:16:38.000Z","updated":"2022-03-01T15:04:01.835Z","comments":true,"path":"2019/10/26/规范化理论/","link":"","permalink":"http://blog.tangbzai.top/2019/10/26/%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA/","excerpt":"","text":"规范化理论 数据冗余 修改异常 插入异常 删除异常 函数依赖 部分依赖 依赖集1：{AB -&gt; C, A -&gt; C} graph LR A-->C B-->C 传递依赖 依赖集2：{A -&gt; B, B -&gt; C} graph LR A-->B B-->C 键 候选键 唯一标识元组，且无冗余 主键 任选一个候选键为主键。 外键 其他关系的主键 求候选键 图示法求候选键 将关系的函数依赖关系，用“有向图”的方式表示。 找出入度为0的属性，并以该属性集合为起点，尝试遍历有向图，若能正常遍历图中所有结点，则该属性集即为关系模式的候选键。 若入度为0的属性集不能遍历图中所有结点，则需要尝试性的将一些中间结点（既有入度，也有出度的结点）并入入度为0的属性集，直到该集合你能遍历所有结点，集合为候选键。 主属性与非主属性 组成候选码的属性就是主属性，其它的就是非主属性。 范式 第一范式（1NF） 当且仅当所有域只包含原子值，即每个属性都是不可再分的数据项，则称该关系模式是第一范式。 第二范式（2NF） 当且仅当关系模式是第一范式（1NF），且每一个非主属性完全依赖候选键（没不完全依赖时）,则称该关系模式是第二范式。 第三范式（3NF） 当且仅当关系模式是第二范式（2NF），且该关系模型中没有非主属性传递依赖于候选键时，则称关系模式是第三范式。 BC范式（BCNF） 当且仅当依赖集中每个依赖的决定因素必定包含该关系模式的某个候选码。 graph TB 1NF-->2NF 1NF---属性值都是不可分的原子 2NF-->3NF 2NF---消除非主属性对候选键的部分依赖 3NF-->BCNF 3NF---清除非主属性对候选键的传递依赖 BCNF---清除主属性对候选键的部分和传递依赖 1NF ⊃ 2NF ⊃ 3NF ⊃ BCNF 模式分解 保持函数依赖分解 数据库模式 ρ={R1,R2,…,Rk} 是关系模式 R 的一个分解，F是R上的函数依赖集，ρ中每个模式Ri上的FD集是Fi。 如果{F1,F2,…,Fk}与F是等价的（即相互逻辑蕴含），那么称为分解ρ保持FD。 也就是说一个 关系模式 分成 多个关系模式的组合 表达的关系没有改变 无损分解 有损：不能还原。 无损：可以还原。 无损联结分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式。 表格法 公式法 适应于两个点的时候","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"关系代数","slug":"关系代数","date":"2019-10-24T12:12:01.000Z","updated":"2020-03-23T15:15:46.145Z","comments":true,"path":"2019/10/24/关系代数/","link":"","permalink":"http://blog.tangbzai.top/2019/10/24/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/","excerpt":"","text":"关系代数 关系S1 SnoSnameSdept No0001MaryIS No0003CandyIS No0004JamIS 关系S2 SnoSnameSdept No0001MaryIS No0008KatterIS No0021TomIS 并 合并所有 S1∪S2 SnoSnameSdept No0001MaryIS No0003CandyIS No0004JamIS No0008KatterIS No0021TomIS 交 只留下两者都有的 S1∩S2 SnoSnameSdept No0001MaryIS 差 前者里删除后者有的（注意有先后顺序） S1-S2 SnoSnameSdept No0001MaryIS No0003CandyIS No0004JamIS 笛卡尔积 两者相乘（每项都与另外的每一个结合） S1×S2 Sno Sname Sdept Sno Sname Sdept No0001 Mary IS No0001 Mary IS No0001 Mary IS No0008 Katter IS No0001 Mary IS No0021 Tom IS No0003 Candy IS No0001 Mary IS No0003 Candy IS No0008 Katter IS No0003 Candy IS No0021 Tom IS No0004 Jam IS No0001 Mary IS No0004 Jam IS No0008 Katter IS No0004 Jam IS No0021 Tom IS 投影 选择列 πSno,Sname(S1) Sno Sname No0001 Mary No0003 Candy No0004 Jam 选择 选择行 δSno=No0003(S1) Sno Sname Sdept No0003 Candy IS 自然连接 关系S1 SnoSnameSdept No0001MaryIS No0003CandyIS No0004JamIS 关系S2 SnoAge No000123 No000821 No002122 S1⋈S2 Sno Sname Sdept Age No0001 Mary IS 23 软件设计师考试常考用其他方式实现自然连接","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"数据库系统","slug":"数据库系统","date":"2019-10-24T07:10:50.000Z","updated":"2020-03-23T15:11:26.767Z","comments":true,"path":"2019/10/24/数据库系统/","link":"","permalink":"http://blog.tangbzai.top/2019/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"数据库系统 三级模式-两层映射 （视图级）外模式 （表级）概念模式 （文件级）内模式 数据库设计过程 需求分析 数据库流图 数据字典 需求说明书 概念结构设计 ER模型 逻辑结构设计 关系模式 物理设计 E-R模型 一个实体型转换为一个关系模式 联系转关系模式 1-1联系：可将联系合并至n端实体关系模型中。 1-n联系：可将联系合并至n端实体关系模式中。 m-n联系：联系必须单独转成关系模式 三个以上实体间的一个多元联系 例：三个不同实体集和它们之间的多对多联系m:n:p,最少可转换为4个关系模式。","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"操作系统","slug":"操作系统","date":"2019-10-24T05:37:35.000Z","updated":"2022-03-01T15:04:01.836Z","comments":true,"path":"2019/10/24/操作系统/","link":"","permalink":"http://blog.tangbzai.top/2019/10/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"操作系统 进程管理 概念 进程是程序在一个数据集合上运行的过程，它是系统的一个独立单位。它由程序块、进程控制块（PCB）和数据块三部分组成。 进程与程序的区别： 进程是程序的一次执行过程，没有程序就没有进程。 程序是完成某个特定功能的一系列程序语句的集合，只要不被破坏，它就永远存在。 程序是一个静态的概念，而进程是一个动态的概念，它由创建而产生，完成任务后因撤销而消亡。 进程是系统进行资源分配和调度的独立单位，而程序不是。 进程的状态 三态模型： graph LR id(就绪)--调度-->id1(运行) id1(运行)--等待某个事件-->id2(等待) id2(等待)--等待事情发生-->id(就绪) id1(运行)--时间片到-->id(就绪) 进程的同步与互斥 直接制约关系 间接制约关系 临界资源 PV操作 临界资源：诸进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等 临界区：每个进程中访问临界资源的那段代码称为临界区 信号量：是一种特殊的变量(可正可负) P是荷兰语Passeren, V是荷兰语的Verhoog。 操作 S值（信号量）变化 说明 P操作 S=S-1 申请资源 V操作 S=S+1 释放资源 同步模型 graph LR id(生产者)-->id1(市场) id1(市场)-->id2(消费者) 生产者 消费者 生产一个产品P(s1) P(s2)从缓冲区取产品； 送产品到缓冲区V(s2) V(s1)消费产品 PV操作是成对的 前趋图（帮助理解） graph LR id(A)-->id3(D) id1(B)-->id3(D) id2(C)-->id3(D) id3(D)-->id4(E) 例如上图： Sa = Sb = Sc = Sd = 0; 线程D需要等待线程A、B、C的V(Sa、Sb、Sc)的唤醒 : P(Sa、Sb、Sc) 死锁问题 如果设计不当或进程在等待一件不可能发生的事，进程就会死锁。 求至少需要多少个资 给每个进程分配他们所需要的资源 - 1个再给系统留有一个 变量名 说明 k 每个进程需要的资源 n 进程数 (k−1)n+1 (k-1)n + 1 (k−1)n+1 死锁的避免 有序资源算法 （全部进程都给他们需要的） 银行家算法 当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程。 进程可以分期请求资源，但请求的总数不能超过 最大需求量 当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在 有限的时间里得到资源。 存储管理 页式存储组织 将程序与内存均划分为同样大小的块，以页为单位将程序调入内存。 逻辑地址=页号+页内地址物理地址=页帧号（物理块号）+页内地址逻辑地址=页号+页内地址 物理地址=页帧号（物理块号）+页内地址 逻辑地址=页号+页内地址物理地址=页帧号（物理块号）+页内地址 优点：利用率高，碎片小，分配及管理简单。 缺点：增加了系统开销；可能产生抖动现象。 段式存储组织 按用户作业中的自然段（程序段）来划分逻辑空间，然后调入内存，段的长度可以不一样。 优点：多道程序共享内存，各段程序修改互不影响 缺点：内存利用率低，内存碎片浪费大 段页式存储组织 段式和页式的综合体。 先分段，再分页。 1个程序有若干个段，每个段中可以有若干页，每个页的大小相同，但每个段的大小不同。 优点：空间浪费小、存储共享容易、存储保护容易、能动态链接 缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降。 页面置换算法 最优算法（Optimal, OPT） 随机算法（RAND） 先进先出算法（FIFO）: 有可能产生“抖动”。例如, 43214543215序列，用4个页面比3个页面更差 最近最少使用算法(LRU)：不会“抖动”，LRU的理论依据是 “局部性原理”。 时间局部性：刚被访问的内容，立即又被访问。 空间局部性：刚被访问的内容，临近的空间很快就访问。 磁盘管理 存取时间=寻道时间+等待时间存取时间 = 寻道时间 + 等待时间 存取时间=寻道时间+等待时间 寻道时间：指磁头移动到磁道所需的时间。 等待时间：等待读写的扇区转到磁头下方所用的时间。 磁盘调度算法 先到先服务（FCFS） 最短寻道时间优先（SSTF） 扫描算法（SCAN）：电梯算法 循环扫描（CSCAN）算法 读取磁盘数据时间计算 读取磁盘数据的时间应包括以下: 找磁道的时间 找块（扇区）的时间，即旋转延迟时间。 传输时间。 作业管理 作业状态与作业管理 graph LR id(提交)-->id1(后备) id1(后备)-->id2(执行) id2(执行)-->id3(完成) 作业调度算法 先来先服务法 时间片轮转法 短时间优先法 最高优先权优先法 高响应比优先法 响应比=作业等待时间作业执行时间 响应比 = \\frac{作业等待时间}{作业执行时间} 响应比=作业执行时间作业等待时间​ 文件管理 索引文件结构 直接索引： graph LR id1(索引节点)-->id2(物理盘块) 一级间接索引： graph LR id1(索引节点)-->id3(地址项) id3(地址项)-->id2(物理盘块) 二级间接索引： graph LR id1(索引节点)-->id3(地址项) id3(地址项)-->id4(地址项) id4(地址项)-->id2(物理盘块) 物理盘块存放的是逻辑页 逻辑页计算公式 直接索引时1个节点对应一个逻辑页 间接索引时一个索引节点代表的逻辑页数为： nxn^x nx 变量 说明 n 一层间接索引的地址项数 x 间接索引的层数 树形目录结构 相对路径 绝对路径 空间存储空间的管理 位视图 设备管理 数据传输控制方式 以下按效率排名 I/O处理器（IOP） 通道方式 DMA方式：DMA方式是为了在主存与外设之间实现高速、批量数据交换而设置的。DMA方式比程序控制方式与中断方式都高效。 程序中断方式：与程序控制方式相比，中断方式因为CPU无需等待而提高了传输请求的响应速度。 程序控制（查询）方式：分为无条件传送和程序查询方式两种。方法简单，硬件开销小，但I/O能力不高，严重影响CPU的利用率。 虚设备与SPOOLING技术 SPOOLing是关于慢速字符设备如何与计算机交换信息的一种技术，通常称为“假脱机技术”。SPOOLing技术通过磁盘实现。 可简单想象为一个队列把任务排队按序执行","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"校验码","slug":"校验码","date":"2019-10-22T04:35:56.000Z","updated":"2020-03-22T07:52:40.093Z","comments":true,"path":"2019/10/22/校验码/","link":"","permalink":"http://blog.tangbzai.top/2019/10/22/%E6%A0%A1%E9%AA%8C%E7%A0%81/","excerpt":"","text":"校验码 奇偶校验码 有效信息位加一个二进制位(校验位) 可检查奇数个位数出错的情况 奇校验：整个校验码（信息位和校验位）中的“1”的个数为奇数 偶校验：整个校验码（信息位和校验位）中的“1”的个数为偶数 例如： 校验法（奇/偶） 信息位 校验位 校验码 奇校验 1010 1 10101 奇校验 1101 0 11010 偶校验 1011 1 10111 偶校验 0101 0 01010 循环校验码CRC k位信息码拼接r位校验码 CRC可检错不可纠错 运算过程中使用到模2除法 模2除法：在除法运算的过程中不计其进位与借位的的除法。 海明码 在有效信息位中加入校验码位，使码距比较均匀地拉大。 可检错，也可纠错 海明校验码公式: 2r≥m+r+12^r ≥ m+r+1 2r≥m+r+1 字符名 含义 特征 m 有效信息位的位数 r 校验码位数 *一般软考中级考试是提供m(有效信息位的位数)求最少的r(校验码位数)","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"Cache","slug":"Cache","date":"2019-10-20T07:34:39.000Z","updated":"2020-03-22T07:45:43.470Z","comments":true,"path":"2019/10/20/Cache/","link":"","permalink":"http://blog.tangbzai.top/2019/10/20/Cache/","excerpt":"","text":"Cache 在计算机的存储系统体系中，Cache是访问速度最快的层次（若有寄存器，则寄存器最快） 使用Cache改善系统性能的依据是程序的局部性原理。 如果 h 代表对Cache的访问命令率， t1 表示Cache的周期时间， t2 表示主存储器周期时间， 以读操作为例，使用“Cache + 主存储器”的系统的平均周期为 t3 则： t3=h×t1+(1−h)×t2 t_3 = h × t_1 + (1 - h) × t_2 t3​=h×t1​+(1−h)×t2​ 其中 (1 - h) 又称 失效率（未命中率） 映象 映象(Cache与主存的对应关系）是直接由硬件控制的。 直接相联映象：硬件电路较简单，但冲突率很高。 全相联映象：电路难于设计和实现，只适用于小容量的Cache,冲突率较低。 组相联映象：直接相联与全相联的折中。 地址映象是将主存与Cache的存储空间划分为若干大小相同的页（块）。 例如： 某机的主存容量为1GB，划分为2048页，每页512KB； Cache容量为8MB，划分为16页，每页512KB","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"流水线","slug":"流水线","date":"2019-10-20T05:54:05.000Z","updated":"2020-03-22T07:45:41.482Z","comments":true,"path":"2019/10/20/流水线/","link":"","permalink":"http://blog.tangbzai.top/2019/10/20/%E6%B5%81%E6%B0%B4%E7%BA%BF/","excerpt":"","text":"流水线 公式 流水线周期（Δt）：执行时间最长的一段 理论公式： (t1+t2+⋯+tk)+(n−1)∗Δt (t_1 + t_2 + \\cdots + t_k) + (n - 1) * Δt (t1​+t2​+⋯+tk​)+(n−1)∗Δt 实践公式： k∗Δt+(n−1)∗Δt k * Δt + (n-1) * Δt k∗Δt+(n−1)∗Δt 注意： k 为执行完一条指令需要多少个步骤 Δt 在题目中一般指单位时间 流水线吞吐量 流水线吞吐量（Though Put, TP）指在单位时间内流水线所完成的任务数量或输出的结果数量。 TP=指令条数流水线执行时间 TP = \\frac {指令条数}{流水线执行时间} TP=流水线执行时间指令条数​ 最大吞吐量 TPmax=lim⁡n→∞n(k+n−1)Δt=1Δt TP_{max} = \\lim_{n \\to \\infty} \\frac {n}{(k+n-1)Δt} = \\frac {1}{Δt} TPmax​=n→∞lim​(k+n−1)Δtn​=Δt1​ 超标量流水线 度：同时进行同一步骤的流水线条数 原公式中的n=n度 原公式中的n = \\frac {n}{度} 原公式中的n=度n​","categories":[],"tags":[{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"}]},{"title":"Windows2012安装IIS和FTP","slug":"Windows2012安装IIS和FTP","date":"2019-06-06T02:57:48.000Z","updated":"2020-06-18T19:22:58.209Z","comments":true,"path":"2019/06/06/Windows2012安装IIS和FTP/","link":"","permalink":"http://blog.tangbzai.top/2019/06/06/Windows2012%E5%AE%89%E8%A3%85IIS%E5%92%8CFTP/","excerpt":"","text":"Windows2012安装IIS和FTP 1. 安装IIS 打开Windows 2012的服务器管理器，选择 管理→添加角色和功能。 进入 添加角色和功能向导，选择 “Web服务器(IIS)”。 根据情况选择对应功能，这里选择.Net3.5。 安装角色服务，选择对应的安全性选项，如图。 选择“FTP服务器”，以及开设主机必须要用的“管理工具”，此项重要。 等待安装，时间稍长，耐心等待即可。 安装完毕，打开IIS管理器查看。 打开了IIS管理器，看到程序池，站点，至此，在Windows2012下安装IIS已经成功。 2. 安装FTP 单击图标进入服务器管理器。 单击 IIS， 右击服务器，选择 Internet 信息服务（IIS）管理器。 右击服务器，选择添加 FTP 站点。 填写 FTP 站点名称，选择 FTP 路径，单击下一步。 IP地址选择全部未分配，SSL选择无SSL。 身份验证选择基本，授权选择所有用户 ，权限设置为读取与写入 。单击完成。 使用系统默认的 administrator 账号和密码，进行登录测试，现在您可以可以正常上传下载文件。 3. 阿里云安全设置开发ftp端口 添加规则选择FTP 遇到的问题与解决办法 1.Xftp 提示无法显示远程文件 点击属性-&gt;选项-&gt;将使用被动模式选项去掉即可 * 如果还不行请检查目录是否属于当前用户下的目录，用户是否有权限访问当前目录 摘自 Windows2012安装IIS和FTP 云服务器 ECS Windows Server 通过 IIS 配置 FTP Xftp 提示无法显示远程文件夹","categories":[],"tags":[{"name":"问题","slug":"问题","permalink":"http://blog.tangbzai.top/tags/%E9%97%AE%E9%A2%98/"},{"name":"记录","slug":"记录","permalink":"http://blog.tangbzai.top/tags/%E8%AE%B0%E5%BD%95/"},{"name":"教程","slug":"教程","permalink":"http://blog.tangbzai.top/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"CSS动画（animation与keyframes）","slug":"CSS动画（animation与keyframes）","date":"2019-04-01T17:05:00.000Z","updated":"2020-05-01T05:14:57.486Z","comments":true,"path":"2019/04/02/CSS动画（animation与keyframes）/","link":"","permalink":"http://blog.tangbzai.top/2019/04/02/CSS%E5%8A%A8%E7%94%BB%EF%BC%88animation%E4%B8%8Ekeyframes%EF%BC%89/","excerpt":"","text":"animation 1animation: name duration timing-function delay iteration-count direction; 属性名 中文名 值 animation-name keyframe名称 / animation-duration 持续时间 (time) animation-timing-function 速度曲线 linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n) animation-delay 开始前的延迟 (time) animation-iteration-count 播放次数 (n) | infinite animation-direction 是否轮流反向播放 normal | alternate animation-play-state 指定动画播放或暂停 paused | running 注： time为时间值默认毫秒为单位，可设置秒为单位（ns） n表示任意整数 @keyframes 12345678@keyframes name &#123; from &#123; color: #fff; &#125; to &#123; color: #000; &#125;&#125; 12345678@keyframes name &#123; 0% &#123; color: #fff; &#125; 100% &#123; color: #000; &#125;&#125; 上面两种效果是等同的 （可用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”） 0% 是动画的开始，100% 是动画的完成。 避免兼容性问题，应该始终定义 0% 和 100% 选择器","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://blog.tangbzai.top/tags/CSS/"}]},{"title":"Hexo d 时出现 On branch master nothing to commit","slug":"Hexo-d-时出现-On-branch-master-nothing-to-commit","date":"2019-03-28T17:03:49.000Z","updated":"2019-03-28T17:06:53.923Z","comments":true,"path":"2019/03/29/Hexo-d-时出现-On-branch-master-nothing-to-commit/","link":"","permalink":"http://blog.tangbzai.top/2019/03/29/Hexo-d-%E6%97%B6%E5%87%BA%E7%8E%B0-On-branch-master-nothing-to-commit/","excerpt":"","text":"问题： Hexo d 时出现 On branch master nothing to commit 和一大串的 warning 上传不上远程仓库 解决 删除文件夹里的.deploy_git文件 参考来源 git 使用——关于使用指令hexo d 出现一大串waring以及无法成功部署到github的解决办法 作者： 寰宇的行者","categories":[],"tags":[{"name":"问题","slug":"问题","permalink":"http://blog.tangbzai.top/tags/%E9%97%AE%E9%A2%98/"}]},{"title":"搭建Hexo博客","slug":"搭建Hexo博客","date":"2019-03-28T16:30:03.000Z","updated":"2020-03-22T07:02:27.067Z","comments":true,"path":"2019/03/29/搭建Hexo博客/","link":"","permalink":"http://blog.tangbzai.top/2019/03/29/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Hexo 博客搭建 1.安装git windows：到git官网上下载 Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：一行代码 1sudo apt-get install git 2.安装nodeJS Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 windows：nodejs选择LTS版本就行了。(LTS:长期支持版本) linux： 12sudo apt-get install nodejssudo apt-get install npm 安装完后，打开命令行 12 node -vnpm -v 3.安装Hexo 1.先创建一个文件夹blog，然后cd到这个文件夹下（或 文件夹右键-&gt;git bash） 1npm install -g hexo-cli 可用hexo -v查看一下版本 初始化hexo 123hexo init myblogcd myblog //进入文件夹内npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public: 存放生成的页面 scaffolds: 生成文章的一些模板 source: 存放文章 themes: 主题 _config.yml: 博客的配置文件 生成静态文件 启动服务器 http://localhost:4000 12hexo ghexo sever 4.注册Github账号、注册Github 注册Github帐号 登陆后需选择New repository,新建仓库 创建一个与用户名相同的仓库，后面加.github.io 点击create repository。 5.生成SSH添加到GitHub 设置git的身份信息（名字与邮箱） 12git config --global user.name &quot;name&quot;git config --global user.email &quot;email&quot; 创建SSH 1ssh-keygen -t rsa -C &quot;email&quot; 在 系统盘-&gt;用户-&gt;（用户名）-&gt;.ssh 目录下找到.ssh文件 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 作者：zjufangzh 来源：CSDN 原文：https://blog.csdn.net/sinat_37781304/article/details/82729029 版权声明：本文为博主原创文章，转载请附上博文链接！ 在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 查看是否成功 1ssh -T git@github.com 6.将Hexo部署到GitHub 将hexo和GitHub关联起来,打开站点配置文件 _config.yml，翻到最后，修改为 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master YourgithubName就是你的GitHub账户 2. 安装 deploy-git 1npm install hexo-deployer-git --save 使用命令部署 123hexo cleanhexo generatehexo deploy hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了 7.设置个人域名 这步之前博客的地址是yourname.github.io,如果想换个就买个域名。 买好了就在域名控制台，选择域名点解析添加192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。 解析线路选默认 登陆GitHub, 进入之前创建的仓库，点击settings, 设置Custiom domain,输入你的域名 source创建一个名为CHANME的文件，不要后缀，写上域名。 最后在git bash 中输入 123hexo cleanhexo ghexo d 8.使用腾讯开发者平台的pages服务进行分流 注：现在coding不能使用pages,得升级账号，腾讯开发者平台的才有此功能。 注册腾讯云开发者平台账号，或coding用户升级。 新建项目 使用Git上传文件项目里 添加ssh公钥到个人账号的公钥上 选择项目-&gt;代码-&gt;pages服务，按照指引完成即可 修改配置文件 123456deploy: type: git repository: github: git@github.com:ShomyLiu/ShomyLiu.github.io.git coding: git@git.coding.net:shomyliu/shomyliu.git branch: master 在博客的source/目录下需要创建一个空白文件,至于原因，是因为 coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。 coding还需要在根目录下建一个.nojekyll空文件（coding page 配置hexo报错 the xx theme not be found 在根目录下建一个.nojekyll空文件就可以了，因为Coding默认支持Jekyll搭建网站） 域名添加解析，这时要把之前的github的解析改成境外，把coding的设置为默认。 参考来源 hexo史上最全搭建教程 作者：zjufangzh Coding Pages 搭建 Hexo 静态博客 作者：Zelsonia","categories":[],"tags":[{"name":"记录","slug":"记录","permalink":"http://blog.tangbzai.top/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-02-08T17:55:37.063Z","updated":"2020-03-22T07:02:19.968Z","comments":true,"path":"2019/02/09/hello-world/","link":"","permalink":"http://blog.tangbzai.top/2019/02/09/hello-world/","excerpt":"","text":"欢迎来到Hexo! 这是第一个帖子. 点击 文档 查看更多信息。 如果在使用时有任何问题可以在 故障排除 里找解决办法，或者来GitHub 问. 快速上手 创建新帖 1$ hexo new &quot;My New Post&quot; 更多信息: Writing 运行本地服务 1$ hexo server 更多信息: Server 生成静态文件 1$ hexo generate 更多信息: Generating 部署到远程站点 1$ hexo deploy 更多信息: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://blog.tangbzai.top/tags/JavaScript/"},{"name":"数学","slug":"数学","permalink":"http://blog.tangbzai.top/tags/%E6%95%B0%E5%AD%A6/"},{"name":"记录","slug":"记录","permalink":"http://blog.tangbzai.top/tags/%E8%AE%B0%E5%BD%95/"},{"name":"教程","slug":"教程","permalink":"http://blog.tangbzai.top/tags/%E6%95%99%E7%A8%8B/"},{"name":"软件设计师","slug":"软件设计师","permalink":"http://blog.tangbzai.top/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"},{"name":"问题","slug":"问题","permalink":"http://blog.tangbzai.top/tags/%E9%97%AE%E9%A2%98/"},{"name":"CSS","slug":"CSS","permalink":"http://blog.tangbzai.top/tags/CSS/"}]}